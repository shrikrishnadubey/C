(a) Assume that the variable s has been declared as follows:

struct {
    int flag: 1;
} s;

With some compilers, executing the following statements causes 1 to be
displayed, but with other compilers, the output is -1. Explain the reason for
this behavior.

s.flag = 1;
printf("%d\n", s.flag);

(b) How can this problem be avoided?

Answer:

A - flag may become -1 or 1 because it was declared as a signed integer,
    and the first bit of a signed integer determines whether or not the value
    is negative.  This is probably undefined behavior in the C standard, so
    different compilers deal with it differently.

B - It can be fixed either by using an extra bit, or by declaring flag as an
    unsigned integer instead of a signed one. With an extra bit, int flag can be
    -1, 0, or 1. As an unsigned int, flag can be 0 or 1.
