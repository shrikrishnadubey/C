Suppose that u is the following union:

union {
  double a;
  struct {
    char b[4];
    double c;
    int d;
  } e;
  char f[4];
} u;

If char values occupy one byte, int values occupy four bytes, and double values
occupy eight bytes, how much space will a C compiler allocate for u?
(Assume that the compiler leaves no "holes" between members.)

Answer:
The union's largest element is struct e,
which is 4 bytes (b[4]) + 8 bytes (c) + 4 bytes (d) = 16 bytes (e).

The union u is 16 bytes.
